function Resolve-PathFormulaGraphForConduction {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)]
        [Signal]$ConductionSignal
    )

    $opSignal = [Signal]::Start("Resolve-PathFormulaGraphForConduction", $ConductionSignal) | Select-Object -Last 1
    $opSignal.LogVerbose("üì¶ Resolving formula graph for Conduction memory layout.")

    # ‚ñë‚ñí‚ñì‚ñà UNWRAP CONDUCTION OBJECT ‚ñà‚ñì‚ñí‚ñë
    $conduction = $ConductionSignal.GetResult()
    if ($null -eq $conduction) {
        $opSignal.LogCritical("‚ùå ConductionSignal does not contain a valid result object.")
        return $opSignal
    }

    # ‚ñë‚ñí‚ñì‚ñà START GRAPH ‚ñà‚ñì‚ñí‚ñë
    $graphSignal = [Graph]::Start("GSG:ConductionGraph", $opSignal, $true) | Select-Object -Last 1
    $graph = $graphSignal.Pointer
    $opSignal.MergeSignal($graphSignal) | Out-Null

    # ‚ñë‚ñí‚ñì‚ñà REGISTER STANDARD SIGNAL NODES ‚ñà‚ñì‚ñí‚ñë
    $signalMap = @{}

    $parts = @(
        @{ Name = "Environment"; Value = $conduction.Jacket },
        @{ Name = "Conductor";   Value = $conduction.Conductor },
        @{ Name = "Conduit";     Value = $conduction.Conduit },
        @{ Name = "Context";     Value = $conduction.Context },
        @{ Name = "Graph";       Value = $conduction.Graph }
    )

    foreach ($part in $parts) {
        $name = "Conduction:$($part.Name)"
        $val = $part.Value
        if ($null -ne $val) {
            $sig = [Signal]::Start($name, $opSignal, $null, $val) | Select-Object -Last 1
            $graph.RegisterSignal($name, $sig) | Out-Null
            $signalMap[$part.Name] = $sig
        } else {
            $opSignal.LogWarning("‚ö†Ô∏è Missing part '$($part.Name)' in conduction object.")
        }
    }

    # ‚ñë‚ñí‚ñì‚ñà FINALIZE GRAPH AND RETURN ‚ñà‚ñì‚ñí‚ñë
    $graph.Finalize()
    $opSignal.SetResult($graph)
    $opSignal.LogInformation("‚úÖ Conduction memory graph resolved and finalized.")
    return $opSignal
}
<#
[Signal] $opSignal
‚îÇ
‚îú‚îÄ‚îÄ .Name = "Resolve-PathFormulaGraphForConduction"
‚îú‚îÄ‚îÄ .ReversePointer = $ConductionSignal
‚îú‚îÄ‚îÄ .Result = $graph (Graph)
‚îÇ   ‚îú‚îÄ‚îÄ .SignalGrid = @{
‚îÇ   ‚îÇ     "Conduction:Environment" = [Signal]
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Name = "Conduction:Environment"
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Jacket = $conduction.Jacket (environment object)
‚îÇ   ‚îÇ     ‚îÇ   ‚îî‚îÄ‚îÄ .Pointer = $null
‚îÇ   ‚îÇ     ‚îÇ
‚îÇ   ‚îÇ     "Conduction:Conductor" = [Signal]
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Name = "Conduction:Conductor"
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Jacket = $conduction.Conductor
‚îÇ   ‚îÇ     ‚îÇ   ‚îî‚îÄ‚îÄ .Pointer = $null
‚îÇ   ‚îÇ     ‚îÇ
‚îÇ   ‚îÇ     "Conduction:Conduit" = [Signal]
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Name = "Conduction:Conduit"
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Jacket = $conduction.Conduit
‚îÇ   ‚îÇ     ‚îÇ   ‚îî‚îÄ‚îÄ .Pointer = $null
‚îÇ   ‚îÇ     ‚îÇ
‚îÇ   ‚îÇ     "Conduction:Context" = [Signal]
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Name = "Conduction:Context"
‚îÇ   ‚îÇ     ‚îÇ   ‚îú‚îÄ‚îÄ .Jacket = $conduction.Context
‚îÇ   ‚îÇ     ‚îÇ   ‚îî‚îÄ‚îÄ .Pointer = $null
‚îÇ   ‚îÇ     ‚îÇ
‚îÇ   ‚îÇ     "Conduction:Graph" = [Signal]
‚îÇ   ‚îÇ         ‚îú‚îÄ‚îÄ .Name = "Conduction:Graph"
‚îÇ   ‚îÇ         ‚îú‚îÄ‚îÄ .Jacket = $conduction.Graph
‚îÇ   ‚îÇ         ‚îî‚îÄ‚îÄ .Pointer = $null
‚îÇ   ‚îî‚îÄ‚îÄ .Finalized = $true
‚îú‚îÄ‚îÄ .Entries = [SignalEntry[]]
 
Description
$opSignal contains the Graph as its .Result, built from the flat parts of the Conduction object.
Each Conduction:<Part> is a Signal that wraps the respective value and is inserted into the .SignalGrid of the Graph.
All .Pointer values are left null for now ‚Äî they can be set later via phase routing or Condensers.
#>