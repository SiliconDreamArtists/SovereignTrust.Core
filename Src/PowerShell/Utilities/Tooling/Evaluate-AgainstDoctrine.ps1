function Evaluate-AgainstDoctrine {
    param (
        [Parameter(Mandatory = $true)][string]$ScriptText,
        [Parameter()][string]$SourceName = "UnnamedScript"
    )

    $signal = [Signal]::Start("Evaluate-AgainstDoctrine:$SourceName")
    $score = 100
    $flags = @()

    # ‚ñë‚ñí‚ñì‚ñà CHECK: MergeSignal enforcement ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -notmatch '\.MergeSignal\(') {
        $score -= 15
        $flags += "‚ùå No .MergeSignal() found ‚Äî risk of signal loss or memory orphaning."
    }

    # ‚ñë‚ñí‚ñì‚ñà CHECK: SetResult usage ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -notmatch '\.SetResult\(') {
        $score -= 10
        $flags += "‚ö†Ô∏è Missing .SetResult() ‚Äî output may be undefined or untracked."
    }

    # ‚ñë‚ñí‚ñì‚ñà CHECK: Raw property access (anti-pattern) ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -match '\.\w+\.\w+') {
        $score -= 20
        $flags += "üö´ Raw property traversal detected ‚Äî use Resolve-PathFromDictionary for sovereign safety."
    }

    # ‚ñë‚ñí‚ñì‚ñà CHECK: Signal creation ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -notmatch '\[Signal\]::new') {
        $score -= 25
        $flags += "‚ùå No signal initialized ‚Äî function is non-sovereign or uncontrolled."
    }

    # ‚ñë‚ñí‚ñì‚ñà CHECK: Logging discipline ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -notmatch '\.Log') {
        $score -= 10
        $flags += "‚ÑπÔ∏è No logging detected ‚Äî traceability compromised."
    }

    # ‚ñë‚ñí‚ñì‚ñà CHECK: Return value is a Signal ‚ñà‚ñì‚ñí‚ñë
    if ($ScriptText -notmatch 'return \$\w+\s*$') {
        $score -= 10
        $flags += "‚ö†Ô∏è Return statement is not signal-tracked."
    }

    # ‚ñë‚ñí‚ñì‚ñà COMPILE REPORT ‚ñà‚ñì‚ñí‚ñë
    $signal.SetResult(@{
        Score = $score
        Flags = $flags
        Passed = ($score -ge 85)
    })

    if ($score -ge 85) {
        $signal.LogInformation("‚úÖ Doctrine alignment strong ‚Äî score $score/100.")
    }
    else {
        $signal.LogWarning("‚ö†Ô∏è Doctrine misalignment detected ‚Äî score $score/100.")
        foreach ($flag in $flags) {
            $signal.LogWarning($flag)
        }
    }

    return $signal
}
